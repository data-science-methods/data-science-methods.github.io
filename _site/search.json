[
  {
    "objectID": "requirements.html",
    "href": "requirements.html",
    "title": "Requirements",
    "section": "",
    "text": "Labs\n\nThere are 6 labs. For the labs, you need to:\n\nSubmit all 6 labs\nRevise and resubmit at least 4 labs, as necessary, until they pass all automatic checks\n\n\nProject\n\nThe course project is divided into 5 stages, with soft deadlines throughout the semester. Detailed instructions and guidelines are here."
  },
  {
    "objectID": "requirements.html#soft-deadlines",
    "href": "requirements.html#soft-deadlines",
    "title": "Requirements",
    "section": "Soft deadlines",
    "text": "Soft deadlines\nUntil the end of term, all deadlines are soft, with no penalties for turning in assignments a few days late. Labs have a soft deadline of 2 weeks for an initial submission, with an additional week to revise & resubmit as necessary to satisfy the automatic checks.\n\nI’ve found soft deadlines work well for about 80% students, who need the flexibility to handle ::gestures at the entire state of everything::. If soft deadlines don’t work well for you, treat the soft deadlines as hard deadlines. I will also try to follow up with you if I notice you’re missing a lot of earlier work.\n\n\nThis course uses a version of contract grading. This means:\n\nYour grade will be determined by the work you complete, not an assessment of the quality of your work.\nThere are only two possible grades: completed (A) and incomplete (B).\n\nIn exceptional cases, eg, almost no work completed, I might also assign a failing grade.\n\n\n\nContract grading was originally developed in writing courses, where the primary goal was to align grading with explicit (“objective”) measures of effort or productivity rather than tacit (“subjective”) measures of quality. Simply practicing writing a lot is more valuable for most undergraduate students than trying to write well. Contract grading also simplifies the grading process.\nI hate the term “contract grading,” which reinforces the idea that education is a commodity that you, the student, are purchasing from me, the teacher. The student-written “contract” of contract grading also seems basically unnecessary."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Methods of Data Science I",
    "section": "",
    "text": "GRAN 120\nTÞ 12:00-1:15pm\n\n\n\n\n\n\n\n\n\n\nweek\ndate\ntopic\nreadings\nlab\n\n\n\n\n1\nAug 26\nMotivation: What researchers can learn from software engineering\n\nMcElreath, Richard. 2020. Science as Amateur Software Development. https://www.youtube.com/watch?v=zwRdO9_GGhY.\nWilson, Greg, Jennifer Bryan, Karen Cranston, Justin Kitzes, Lex Nederbragt, and Tracy K. Teal. 2017. “Good Enough Practices in Scientific Computing.” PLOS Computational Biology 13 (6): e1005510. https://doi.org/10.1371/journal.pcbi.1005510.\n\n\n\n\n2\nAug 31\nBasic tools: git, tests, and R Markdown\n\nRam, Karthik. 2013. “Git Can Facilitate Greater Reproducibility and Increased Transparency in Science.” Source Code for Biology and Medicine 8 (1): 7. https://doi.org/10.1186/1751-0473-8-7.\nOptional: Blischak, John D., Emily R. Davenport, and Greg Wilson. 2016. “A Quick Introduction to Version Control with Git and GitHub.” PLOS Computational Biology 12 (1): e1004668. https://doi.org/10.1371/journal.pcbi.1004668.\nOptional: Baumer, Ben, Mine Cetinkaya-Rundel, Andrew Bray, Linda Loi, and Nicholas J. Horton. 2014. “R Markdown: Integrating A Reproducible Analysis Tool into Introductory Statistics.” ArXiv:1402.1894 [Stat], February. http://arxiv.org/abs/1402.1894.\n\nWeek 2: Git"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "reflexivity.html",
    "href": "reflexivity.html",
    "title": "Reflexivity questions",
    "section": "",
    "text": "What do I already know about this?\nWhy am I learning more about this?\nWhat do I expect or hope to learn or find?\nWho and what is affected by this topic? How can I respect them through the work I’m about to do?"
  },
  {
    "objectID": "project.html",
    "href": "project.html",
    "title": "Course project",
    "section": "",
    "text": "Proposal\nWhat to submit: The proposal document, in the text of an email or as an attached plaintext, HTML, or PDF file\nYour proposal should formulate a research question for your project and identify a dataset that you’ll analyze to address your research question.\nYour research question can be a more formal, academic question — like something from your home discipline — or a more causal, “data science-y” question — like you might examine in a hackathon, data science challenge, or detailed blog post.\nThe dataset should be relatively large and complex, and not data that you have collected yourself or previously analyzed. Part of the work of researching the data journey and exploring data analysis is familiarizing yourself with found or opportunistic data. It’s okay if you’re using the dataset for a project in another class or your lab group this semester, so long as you’re asking a very different research question.\nBecause you’re working with opportunistic data, it might be easier to find an interesting dataset first, then develop your research question.\nIf you’re having trouble finding interesting datasets, try the TidyTuesday project or the Kaggle dataset library.\nThe proposal document should be 3 paragraphs long, with 75-150 words per paragraph. The paragraphs should be labeled “Intellectual Merit,” “Broader Impacts,” and “Data and Methods,” in that order.\n\nIntellectual Merit\n\nWhat is your primary research question? Why is this question interesting and worth investigating, from an academic or intellectual perspective?\n\nBroader Impacts\n\nWhy is your research question socially valuable? Why should the general public care about the answer to this question, and pay someone to investigate it?\n\nData and Methods\n\nWhat dataset will you use to investigate your question? Why does this dataset seem appropriate for your question? What analytical methods will you apply? Because it’s not the focus of our class, you don’t have to use any fancy statistical methods (for whatever “fancy” means to you). You can even focus on exploratory methods, such as descriptive summaries and visualization.\n\n\n\n\nData journey narrative\n[tbd]\n\n\nExploratory data analysis\n[tbd]\nYour exploratory analysis should cover the most relevant elements from the EDA checklists to validate your data. Be sure to identify and address limitations of your data for answering your research question. If your EDA concludes that these data are not fit for purpose, it’s okay to continue forward with your project. Your report in the next stage should focus on explaining why your data are not fit for purpose, and then discuss how better data might be collected.\n\n\n(Reproducible) report\nWhat to submit: A PDF of your report, a link or invitation to your GitHub repo with automatically reproducible code and data\nThe report for your analysis should structured somewhat like a traditional scientific paper: introduction, methods, results, discussion. But the content of these sections will be somewhat non-traditional.\nThe total length of this report should be 3,000-5,000 words, not including references.\nAs a stretch goal, your report should be fully reproducible. Using renv and a Makefile, I should be able to clone your repository and then follow instructions in the README to exactly reproduce the PDF of your report.\n\nIntroduction\n\nAs usual, motivate your topic, give some background, and clearly state the research question.\nIn addition, incorporate answers to the reflexivity questions: what did you already know about this topic before starting to work on the project, what did you expect to find, who’s impacted by this topic, and how will your work respect them?\n\nMethods\n\nThe methods section should focus on the data, and in particular should incorporate your data journey narrative.\n\nResults\n\nAs usual, your findings should be framed as phenomena (in the sense of the Brown chapter) rather than causal claims, mechanisms, or theoretical results.\nThe first subsection of your findings should incorporate your EDA. The second subsection can address your research questions. Use visualizations along with or instead of tables. Keep your visualizations close to the data. For example, include both a scatterplot and a fitted regression curve.\n\nDiscussion\n\nAs usual, briefly (1-2 sentences) recap your major findings, then discuss limitations and directions for future research.\nResist the temptation to treat your findings as conclusive or as vindicating (or challenging) some larger theory. Instead, emphasize the ways future research can improve our understanding of the phenomena: how new data might be collected to mitigate the limitations of this dataset, how different kinds of data might complement the kind of data used here, and how further studies might trace out the scope of the phenomena found in this dataset.\nFinally, come back to the reflexivity questions in the introduction. Were your expectations met? (Probably a mix of both yes and no; explain.) What implications might your findings have for people affected by the topic? How should these implications shape the trajectory of future research on this topic?\n\n\n\n\nFlash talk presentation\nWhat to submit: You won’t submit anything, but you will give a presentation for the class\nAt the last class meeting, you’ll give a 5-minute presentation of your project. Your target audience is the other students in the class, so you’ll need to start by motivating your project and be thoughtful about the use of jargon from your home discipline. Depending on how much time we have, we may or may not have questions after the flash talks.\nYou should use slides for your presentation, but you don’t have to turn them in. Google Slides, PowerPoint, Keynote, or whatever are fine, because you’re responsible for arranging to project your slides and checking in advance that everything works as expected in our classroom.\nBecause flash talks are so short, I strongly recommend writing a script, checking the timing, and then memorizing the script. There will be a loud timer at 5 minutes."
  }
]